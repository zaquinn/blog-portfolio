---
import Star from "../components/Star.astro";

type Props = {
  title: string;
};

type KeyNumberStrVal = { [key: number]: string };

const getRandomInteger = (min: number, max: number) => {
  const minCeiled = Math.ceil(min);
  const maxFloored = Math.floor(max);
  return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled);
};

const colors: KeyNumberStrVal = {
  1: "white",
  2: "red",
  3: "blue",
};

const generateRandomStars = () => {
  return Array.from({ length: 9 }, (_, index) => index + 1);
};

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="body">
    {
      generateRandomStars().map((_) => (
        <Star
          color={`${colors[getRandomInteger(1, 4)]}`}
          top={`${getRandomInteger(100, 1000)}px`}
          left={`${getRandomInteger(100, 1000)}px`}
        />
      ))
    }
    <slot />
  </body>
</html>

<style lang="scss">
  $body-gradient: linear-gradient(rgb(1, 1, 34), black);
  .body {
    height: 100vh;
    background: $body-gradient;
    overflow: hidden;
  }
</style>
